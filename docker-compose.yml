version: '3'

services:
  mqtt:
    image: eclipse-mosquitto:latest
    container_name: "mqtt"
    restart: always
    networks:
      - pretty-fly-admin_net
    ports:
      - 1883:1883
      - 9001:9001
    env_file:
      - ./mqtt/mqtt.env
    environment:
      - TZ=Europe/London
      - VIRTUAL_HOST=mqtt$ENV_DOMAIN
      - VIRTUAL_PORT=1883
      - PGID=1000
      - PUID=1000
      # THIS MAY NOT WORK FOR CALLING SPECIFIC PORTS. NEED TO CHECK WHEN SET UP MQTT DEVICE
    volumes:
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/log:/mosquitto/log
      - ./mqtt/sec:/mosquitto/sec

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana"
    networks:
      - pretty-fly-admin_net
    depends_on:
      - influxdb
    # links:
    #   - influxdb
    environment:
      - TZ=Europe/London
      - PGID=1000
      - PUID=1000
      - VIRTUAL_HOST=grafana$ENV_DOMAIN
      - VIRTUAL_PORT=3000
    user: "472"
    ports:
      - 3000:3000
    restart: on-failure
    volumes:
      # - ./grafana/lib:/var/lib/grafana
      - ./grafana/conf:/etc/grafana
      # - ./grafana/conf/grafana.ini:/etc/grafana/grafana.ini ### NEED TO UPDATE TO SOLVE GRAFANA ISSUE ON NUC
      # - ./grafana/conf/datasources:/etc/grafana/datasources
      - ./grafana/lib:/var/lib/grafana

  influxdb:
    image: influxdb:latest
    container_name: "influxdb"
    networks:
      - pretty-fly-admin_net
    # healthcheck:
    #   test: ["CMD", "curl", "-sI", "http://127.0.0.1:8086/ping"]
    #   interval: 30s
    #   timeout: 1s
    #   retries: 24
    environment:
      - TZ=Europe/London
      - VIRTUAL_HOST=influxdb${ENV_DOMAIN}
      - VIRTUAL_PORT=8086
    env_file:
      - ./influxdb/influxdb.env
      - ./influxdb/influxdbsecrets.env
    ports:
      # - 8083:8083
      - 8086:8086
    restart: on-failure
    volumes:
      - ./influxdb:/var/lib/influxdb
    # env_file:
    #   - ${INFLUXDB_envfile}

  home-assistant:
    #image: homeassistant/home-assistant:rc
    image: homeassistant/home-assistant:0.111.3
    container_name: "hass"
    networks:
      pretty-fly-admin_net:
        ipv4_address: 172.19.0.14
    restart: always
    env_file:
      - ./homeassistant/config/ha.env
    depends_on:
      - influxdb
      - mqtt
    #healthcheck:
      #test: ["CMD", "curl", "-f", "http://127.0.0.1:8123/ping"]
      #interval: 30s
      #timeout: 10s
      #retries: 6
    ports:
      - 8123:8123
#      - 192.168.1.6:5683:5683/udp
#      - 192.168.1.6:5353:5353/udp
    volumes:
      - ./homeassistant/config:/config
    environment:
      - TZ=Europe/London
      - VIRTUAL_HOST=home-assistant$ENV_DOMAIN
      - VIRTUAL_PORT=8123

  telegraf:
    image: nuntz/telegraf-snmp #telegraf:latest
    container_name: telegraf
    env_file:
      - ./telegraf/telegrafsecrets.env
    environment:
      - PGID=1000
      - PUID=1000
    # environment:
    #   - VIRTUAL_HOST=telegraf${ENV_DOMAIN}
    #
    networks:
      - pretty-fly-admin_net
    # links:
    #   - influxdb
    #command: bash -c "echo "deb http://ftp.us.debian.org/debian stretch main non-free" >> /etc/apt/sources.list"
    #command: bash -c "apt-get update && apt-get install -y --no-install-recommends iputils-ping snmp procps snmp-mibs-downloader && rm -rf /var/lib/apt/lists/*"
    volumes:
      - ./telegraf:/etc/telegraf
      - ./telegraf/mibs:/usr/share/snmp/mibs
      - /var/run/docker.sock:/var/run/docker.sock

  chronograf:
    image: chronograf:latest
    container_name: chronograf
    networks:
      - pretty-fly-admin_net
    environment:
      - VIRTUAL_HOST=chronograf$ENV_DOMAIN
      - VIRTUAL_PORT=8888
    volumes:
      - ./chronograf:/var/lib/chronograf
    ports:
      - "8888:8888"
    # links:
    #   - influxdb

  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    environment:
      - VIRTUAL_HOST=nodered${ENV_DOMAIN}
      - VIRTUAL_PORT=1880
      - PGID=1001
      - PUID=1001
      # - FLOWS=/data/flows_prettyflypi.json
    networks:
      - pretty-fly-admin_net
    ports:
      - 1880:1880
      - 3456:3456
    user: node-red
    volumes:
      - ./node-red:/data

  # unifi-video:
  #   image: pducharme/unifi-video-controller:latest
  #   container_name: unifi-video
  #   environment:
  #     - VIRTUAL_HOST=unifi-video${ENV_DOMAIN}
  #     - VIRTUAL_PORT=7080
  #   networks:
  #     - net
  #   ports:
  #     - 7080:7080
  #   security_opt:
  #     - apparmor:unconfined
  #   cap_add:
  #     - SYS_ADMIN
  #     - DAC_READ_SEARCH
    # volumes:
    #   - ./unifi-video/data:/var/lib/unifi-video/
    #   - ./unifi-video/log:/var/log/unifi-video/

  hass-configurator:
    image: "causticlab/hass-configurator-docker:x86_64"
    restart: always
    container_name: configurator
    environment:
      - VIRTUAL_HOST=configurator${ENV_DOMAIN}
      - VIRTUAL_PORT=3218
    ports:
      - 3218:3218
    networks:
      - pretty-fly-admin_net
    volumes:
      - "./configurator:/config"
      - "./homeassistant/config:/hass-config"

  esphome:
    image: "esphome/esphome"
    restart: always
    container_name: esphome
    env_file: "./esphome/config/esphome.env"
    environment:
      - VIRTUAL_HOST=esphome${ENV_DOMAIN}
      - VIRTUAL_PORT=6052
    ports:
      - 6052:6052
    networks:
      - pretty-fly-admin_net
    volumes:
      - "./esphome/config:/config"
    # devices:
    #   - "/dev/ttyUSB0:/dev/ttyUSB0"
    #   # - "/dev/cu.usbserial-0001:/dev/cu.usbserial-0001"
    #   # - "/dev/ttyUSB0"
    #   - "/dev/SLAB_USBtoUART:/dev/SLAB_USBtoUART"

  teslamate:
    image: teslamate/teslamate:latest
    restart: always
    env_file: "./teslamate/teslamate.env"
    container_name: teslamate
    environment:
      - VIRTUAL_HOST=teslamate${ENV_DOMAIN}
      - VIRTUAL_PORT=4000
    ports:
      - 4000:4000
    volumes:
      - ./teslamate/import:/opt/app/import
    cap_drop:
      - all
    networks:
      - pretty-fly-admin_net

  postgresdb:
    image: postgres:12
    restart: always
    container_name: postgresdb
    env_file: "./postgresdb/postgresdb.env"
    ports:
      - 5432:5432
    volumes:
      - ./postgresdb/teslamate-db:/var/lib/postgresql/data
    networks:
      - pretty-fly-admin_net

  chromecast-kiosk:
    image: rez0n/chromecast-kiosk
    restart: always
    container_name: chromecast-kiosk
    environment:
      - VIRTUAL_HOST=kiosk${ENV_DOMAIN}
      - VIRTUAL_PORT=8082
    ports:
      - 8082:8080
    networks:
      - pretty-fly-admin_net

networks:
  pretty-fly-admin_net:
    external: true
